{"version":3,"sources":["src/index.js"],"names":["document","getElementById","innerHTML","querySelector","addEventListener","body","classList","toggle","isDarkMode","contains","localStorage","setItem","setAttribute","start_screen","game_screen","pause_screen","result_screen","cells","querySelectorAll","name_input","number_inputs","player_name","game_level","game_time","result_time","level_index","level","CONSTANT","LEVEL","timer","pause","seconds","su","undefined","su_answer","selected_cell","getGameInfo","JSON","parse","getItem","initGameGrid","index","i","Math","pow","GRID_SIZE","row","floor","col","style","marginBottom","marginRight","setPlayerName","name","getPlayerName","showTime","Date","toISOString","substr","clearSudoku","remove","initSudoku","resetBg","sudokuGen","question","saveGameInfo","add","loadSudoku","game","LEVEL_NAME","answer","hoverBg","box_start_row","box_start_col","BOX_SIZE","j","step","forEach","e","checkErr","value","addErr","cell","parseInt","getAttribute","setTimeout","removeErr","original","stringify","removeGameInfo","removeItem","display","isGameWin","sudokuCheck","showResult","clearInterval","initNumberInputEvent","initCellsEvent","startGame","trim","setInterval","returnStartScreen","length","target","focus","console","log","init","darkmode"],"mappings":"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","file":"src.2dacbb8b.js","sourceRoot":"..","sourcesContent":["import \"./styles.css\";\n\ndocument.getElementById(\"app\").innerHTML = `\n<h1>Hello Vanilla!</h1>\n<div>\n  We use the same configuration as Parcel to bundle this sandbox, you can find more\n  info about Parcel \n  <a href=\"https://parceljs.org\" target=\"_blank\" rel=\"noopener noreferrer\">here</a>.\n</div>\n`;\ndocument.querySelector(\"#dark-mode-toggle\").addEventListener(\"click\", () => {\n  document.body.classList.toggle(\"dark\");\n  const isDarkMode = document.body.classList.contains(\"dark\");\n  localStorage.setItem(\"darkmode\", isDarkMode);\n  // chang mobile status bar color\n  document\n    .querySelector('meta[name=\"theme-color\"')\n    .setAttribute(\"content\", isDarkMode ? \"#1a1a2e\" : \"#fff\");\n});\n\n// initial value\n\n// screens\nconst start_screen = document.querySelector(\"#start-screen\");\nconst game_screen = document.querySelector(\"#game-screen\");\nconst pause_screen = document.querySelector(\"#pause-screen\");\nconst result_screen = document.querySelector(\"#result-screen\");\n// ----------\nconst cells = document.querySelectorAll(\".main-grid-cell\");\n\nconst name_input = document.querySelector(\"#input-name\");\n\nconst number_inputs = document.querySelectorAll(\".number\");\n\nconst player_name = document.querySelector(\"#player-name\");\nconst game_level = document.querySelector(\"#game-level\");\nconst game_time = document.querySelector(\"#game-time\");\n\nconst result_time = document.querySelector(\"#result-time\");\n\nlet level_index = 0;\nlet level = CONSTANT.LEVEL[level_index];\n\nlet timer = null;\nlet pause = false;\nlet seconds = 0;\n\nlet su = undefined;\nlet su_answer = undefined;\n\nlet selected_cell = -1;\n\n// --------\n\nconst getGameInfo = () => JSON.parse(localStorage.getItem(\"game\"));\n\n// add space for each 9 cells\nconst initGameGrid = () => {\n  let index = 0;\n\n  for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n    let row = Math.floor(i / CONSTANT.GRID_SIZE);\n    let col = i % CONSTANT.GRID_SIZE;\n    if (row === 2 || row === 5) cells[index].style.marginBottom = \"10px\";\n    if (col === 2 || col === 5) cells[index].style.marginRight = \"10px\";\n\n    index++;\n  }\n};\n// ----------------\n\nconst setPlayerName = (name) => localStorage.setItem(\"player_name\", name);\nconst getPlayerName = () => localStorage.getItem(\"player_name\");\n\nconst showTime = (seconds) =>\n  new Date(seconds * 1000).toISOString().substr(11, 8);\n\nconst clearSudoku = () => {\n  for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n    cells[i].innerHTML = \"\";\n    cells[i].classList.remove(\"filled\");\n    cells[i].classList.remove(\"selected\");\n  }\n};\n\nconst initSudoku = () => {\n  // clear old sudoku\n  clearSudoku();\n  resetBg();\n  // generate sudoku puzzle here\n  su = sudokuGen(level);\n  su_answer = [...su.question];\n\n  seconds = 0;\n\n  saveGameInfo();\n\n  // show sudoku to div\n  for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n    let row = Math.floor(i / CONSTANT.GRID_SIZE);\n    let col = i % CONSTANT.GRID_SIZE;\n\n    cells[i].setAttribute(\"data-value\", su.question[row][col]);\n\n    if (su.question[row][col] !== 0) {\n      cells[i].classList.add(\"filled\");\n      cells[i].innerHTML = su.question[row][col];\n    }\n  }\n};\n\nconst loadSudoku = () => {\n  let game = getGameInfo();\n\n  game_level.innerHTML = CONSTANT.LEVEL_NAME[game.level];\n\n  su = game.su;\n\n  su_answer = su.answer;\n\n  seconds = game.seconds;\n  game_time.innerHTML = showTime(seconds);\n\n  level_index = game.level;\n\n  // show sudoku to div\n  for (let i = 0; i < Math.pow(CONSTANT.GRID_SIZE, 2); i++) {\n    let row = Math.floor(i / CONSTANT.GRID_SIZE);\n    let col = i % CONSTANT.GRID_SIZE;\n\n    cells[i].setAttribute(\"data-value\", su_answer[row][col]);\n    cells[i].innerHTML = su_answer[row][col] !== 0 ? su_answer[row][col] : \"\";\n    if (su.question[row][col] !== 0) {\n      cells[i].classList.add(\"filled\");\n    }\n  }\n};\n\nconst hoverBg = (index) => {\n  let row = Math.floor(index / CONSTANT.GRID_SIZE);\n  let col = index % CONSTANT.GRID_SIZE;\n\n  let box_start_row = row - (row % 3);\n  let box_start_col = col - (col % 3);\n\n  for (let i = 0; i < CONSTANT.BOX_SIZE; i++) {\n    for (let j = 0; j < CONSTANT.BOX_SIZE; j++) {\n      let cell = cells[9 * (box_start_row + i) + (box_start_col + j)];\n      cell.classList.add(\"hover\");\n    }\n  }\n\n  let step = 9;\n  while (index - step >= 0) {\n    cells[index - step].classList.add(\"hover\");\n    step += 9;\n  }\n\n  step = 9;\n  while (index + step < 81) {\n    cells[index + step].classList.add(\"hover\");\n    step += 9;\n  }\n\n  step = 1;\n  while (index - step >= 9 * row) {\n    cells[index - step].classList.add(\"hover\");\n    step += 1;\n  }\n\n  step = 1;\n  while (index + step < 9 * row + 9) {\n    cells[index + step].classList.add(\"hover\");\n    step += 1;\n  }\n};\n\nconst resetBg = () => {\n  cells.forEach((e) => e.classList.remove(\"hover\"));\n};\n\nconst checkErr = (value) => {\n  const addErr = (cell) => {\n    if (parseInt(cell.getAttribute(\"data-value\")) === value) {\n      cell.classList.add(\"err\");\n      cell.classList.add(\"cell-err\");\n      setTimeout(() => {\n        cell.classList.remove(\"cell-err\");\n      }, 500);\n    }\n  };\n\n  let index = selected_cell;\n\n  let row = Math.floor(index / CONSTANT.GRID_SIZE);\n  let col = index % CONSTANT.GRID_SIZE;\n\n  let box_start_row = row - (row % 3);\n  let box_start_col = col - (col % 3);\n\n  for (let i = 0; i < CONSTANT.BOX_SIZE; i++) {\n    for (let j = 0; j < CONSTANT.BOX_SIZE; j++) {\n      let cell = cells[9 * (box_start_row + i) + (box_start_col + j)];\n      if (!cell.classList.contains(\"selected\")) addErr(cell);\n    }\n  }\n\n  let step = 9;\n  while (index - step >= 0) {\n    addErr(cells[index - step]);\n    step += 9;\n  }\n\n  step = 9;\n  while (index + step < 81) {\n    addErr(cells[index + step]);\n    step += 9;\n  }\n\n  step = 1;\n  while (index - step >= 9 * row) {\n    addErr(cells[index - step]);\n    step += 1;\n  }\n\n  step = 1;\n  while (index + step < 9 * row + 9) {\n    addErr(cells[index + step]);\n    step += 1;\n  }\n};\n\nconst removeErr = () => cells.forEach((e) => e.classList.remove(\"err\"));\n\nconst saveGameInfo = () => {\n  let game = {\n    level: level_index,\n    seconds: seconds,\n    su: {\n      original: su.original,\n      question: su.question,\n      answer: su_answer\n    }\n  };\n  localStorage.setItem(\"game\", JSON.stringify(game));\n};\n\nconst removeGameInfo = () => {\n  localStorage.removeItem(\"game\");\n  document.querySelector(\"#btn-continue\").style.display = \"none\";\n};\n\nconst isGameWin = () => sudokuCheck(su_answer);\n\nconst showResult = () => {\n  clearInterval(timer);\n  result_screen.classList.add(\"active\");\n  result_time.innerHTML = showTime(seconds);\n};\n\nconst initNumberInputEvent = () => {\n  number_inputs.forEach((e, index) => {\n    e.addEventListener(\"click\", () => {\n      if (!cells[selected_cell].classList.contains(\"filled\")) {\n        cells[selected_cell].innerHTML = index + 1;\n        cells[selected_cell].setAttribute(\"data-value\", index + 1);\n        // add to answer\n        let row = Math.floor(selected_cell / CONSTANT.GRID_SIZE);\n        let col = selected_cell % CONSTANT.GRID_SIZE;\n        su_answer[row][col] = index + 1;\n        // save game\n        saveGameInfo();\n        // -----\n        removeErr();\n        checkErr(index + 1);\n        cells[selected_cell].classList.add(\"zoom-in\");\n        setTimeout(() => {\n          cells[selected_cell].classList.remove(\"zoom-in\");\n        }, 500);\n\n        // check game win\n        if (isGameWin()) {\n          removeGameInfo();\n          showResult();\n        }\n        // ----\n      }\n    });\n  });\n};\n\nconst initCellsEvent = () => {\n  cells.forEach((e, index) => {\n    e.addEventListener(\"click\", () => {\n      if (!e.classList.contains(\"filled\")) {\n        cells.forEach((e) => e.classList.remove(\"selected\"));\n\n        selected_cell = index;\n        e.classList.remove(\"err\");\n        e.classList.add(\"selected\");\n        resetBg();\n        hoverBg(index);\n      }\n    });\n  });\n};\n\nconst startGame = () => {\n  start_screen.classList.remove(\"active\");\n  game_screen.classList.add(\"active\");\n\n  player_name.innerHTML = name_input.value.trim();\n  setPlayerName(name_input.value.trim());\n\n  game_level.innerHTML = CONSTANT.LEVEL_NAME[level_index];\n\n  showTime(seconds);\n\n  timer = setInterval(() => {\n    if (!pause) {\n      seconds = seconds + 1;\n      game_time.innerHTML = showTime(seconds);\n    }\n  }, 1000);\n};\n\nconst returnStartScreen = () => {\n  clearInterval(timer);\n  pause = false;\n  seconds = 0;\n  start_screen.classList.add(\"active\");\n  game_screen.classList.remove(\"active\");\n  pause_screen.classList.remove(\"active\");\n  result_screen.classList.remove(\"active\");\n};\n\n// add button event\ndocument.querySelector(\"#btn-level\").addEventListener(\"click\", (e) => {\n  level_index =\n    level_index + 1 > CONSTANT.LEVEL.length - 1 ? 0 : level_index + 1;\n  level = CONSTANT.LEVEL[level_index];\n  e.target.innerHTML = CONSTANT.LEVEL_NAME[level_index];\n});\n\ndocument.querySelector(\"#btn-play\").addEventListener(\"click\", () => {\n  if (name_input.value.trim().length > 0) {\n    initSudoku();\n    startGame();\n  } else {\n    name_input.classList.add(\"input-err\");\n    setTimeout(() => {\n      name_input.classList.remove(\"input-err\");\n      name_input.focus();\n    }, 500);\n  }\n});\n\ndocument.querySelector(\"#btn-continue\").addEventListener(\"click\", () => {\n  if (name_input.value.trim().length > 0) {\n    loadSudoku();\n    startGame();\n  } else {\n    name_input.classList.add(\"input-err\");\n    setTimeout(() => {\n      name_input.classList.remove(\"input-err\");\n      name_input.focus();\n    }, 500);\n  }\n});\n\ndocument.querySelector(\"#btn-pause\").addEventListener(\"click\", () => {\n  pause_screen.classList.add(\"active\");\n  pause = true;\n});\n\ndocument.querySelector(\"#btn-resume\").addEventListener(\"click\", () => {\n  pause_screen.classList.remove(\"active\");\n  pause = false;\n});\n\ndocument.querySelector(\"#btn-new-game\").addEventListener(\"click\", () => {\n  returnStartScreen();\n});\n\ndocument.querySelector(\"#btn-new-game-2\").addEventListener(\"click\", () => {\n  console.log(\"object\");\n  returnStartScreen();\n});\n\ndocument.querySelector(\"#btn-delete\").addEventListener(\"click\", () => {\n  cells[selected_cell].innerHTML = \"\";\n  cells[selected_cell].setAttribute(\"data-value\", 0);\n\n  let row = Math.floor(selected_cell / CONSTANT.GRID_SIZE);\n  let col = selected_cell % CONSTANT.GRID_SIZE;\n\n  su_answer[row][col] = 0;\n\n  removeErr();\n});\n// -------------\n\nconst init = () => {\n  const darkmode = JSON.parse(localStorage.getItem(\"darkmode\"));\n  document.body.classList.add(darkmode ? \"dark\" : \"light\");\n  document\n    .querySelector('meta[name=\"theme-color\"')\n    .setAttribute(\"content\", darkmode ? \"#1a1a2e\" : \"#fff\");\n\n  const game = getGameInfo();\n\n  document.querySelector(\"#btn-continue\").style.display = game\n    ? \"grid\"\n    : \"none\";\n\n  initGameGrid();\n  initCellsEvent();\n  initNumberInputEvent();\n\n  if (getPlayerName()) {\n    name_input.value = getPlayerName();\n  } else {\n    name_input.focus();\n  }\n};\n\ninit();\n"]}